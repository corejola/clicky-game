{"version":3,"sources":["components/Navbar/Navbar.js","components/Card/Card.js","components/Wrapper/index.js","App.js","index.js"],"names":["Navbar","props","className","score","currentScore","topScore","Card","state","isClicked","this","id","name","image","onClick","alt","src","Component","Wrapper","children","App","clicked","charData","Data","clickedEvent","bind","array","i","length","j","Math","floor","random","setState","event","gameScore","target","prevState","indexOf","shuffleData","map","item","shuffleCard","shuffle","key","ReactDOM","render","document","getElementById"],"mappings":"ynDAwBeA,MArBf,SAAgBC,GAGZ,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,SAAd,wBACA,yBAAKA,UAAU,iCAEX,yBAAKA,UAAU,4BACX,yGAGJ,6BACA,yBAAKA,UAAU,4BACX,8CAAoBD,EAAME,MAAMC,aAAhC,iBAA4DH,EAAME,MAAME,cC4B7EC,G,kBAvCX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,WAAW,GAHL,E,sEAoBL,MAIuBC,KAAKR,MAAMA,MAA/BS,EAJH,EAIGA,GAAIC,EAJP,EAIOA,KAAMC,EAJb,EAIaA,MAClB,OAII,yBAAMV,UAAU,OAAOW,QAASJ,KAAKR,MAAMY,SACvC,yBAAKX,UAAU,gBAAgBQ,GAAIA,GAC/B,yBAAKA,GAAIA,EAAII,IAAKH,EAAMI,IAAKH,U,GAhC9BI,c,MCEJC,MAJf,SAAiBhB,GACf,OAAO,yBAAKC,UAAU,qBAAqBD,EAAMiB,W,OC2FpCC,E,YAvFb,aAAe,IAAD,8BACZ,+CACKZ,MAAQ,CACXa,QAAS,GACThB,aAAc,EACdC,SAAU,EACVgB,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARR,E,yEAWFC,GAEV,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,Q,kCAS3C,OAAOnB,KAAKF,MAAMH,aAAeK,KAAKF,MAAMF,SAAWI,KAAKuB,SAAS,CAAE3B,SAAUI,KAAKF,MAAMH,eAAkB,O,mCAGnG6B,GAAQ,IAAD,OAElBxB,KAAKyB,YAFa,IAKVxB,EAAOuB,EAAME,OAAbzB,GALU,EAM0BD,KAAKF,MAAzCa,EANU,EAMVA,QAAShB,EANC,EAMDA,aANC,EAMaiB,SAE/BZ,KAAKuB,UAAS,SAAAI,GAAS,MAAK,CAC1BhB,QAAQ,GAAD,mBAAMgB,EAAUhB,SAAhB,CAAyBV,SAOL,IAAzBU,EAAQiB,QAAQ3B,IAClBD,KAAKyB,YACLzB,KAAKuB,SAAS,CAGZ5B,aAAcA,EAAe,IAC5B,WAAQ,EAAK8B,gBAMhBzB,KAAKuB,SAAS,CACZZ,QAAS,GACThB,aAAc,M,+BAOV,IAAD,OAECiB,EAAaZ,KAAKF,MAAlBc,SAGR,OAFAZ,KAAK6B,YAAYjB,GAGf,6BACE,kBAAC,EAAD,CAAQlB,MAAOM,KAAKF,QACpB,kBAAC,EAAD,KAKGc,EAASkB,KAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CACEC,YAAa,EAAKC,QAClBC,IAAKH,EAAK9B,GACVT,MAAOuC,EACP3B,QAAS,EAAKU,wB,GAjFVP,aCFlB4B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ecbd4995.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Navbar(props) {\n    // pass props.currentScore & props.topScore\n\n    return (\n        <div className=\"header\">\n            <h1 className=\"title\">MARVEL  CLICKY  GAME</h1>\n            <div className=\"d-flex justify-content-around\">\n                {/* <h1 className=\"title\">{props.children}</h1> */}\n                <div className=\"order-1 p-2 bd-highlight\">\n                    <h4>Click on an image to gain points, but don't click on any more than once!</h4>\n\n                </div>\n                <br />\n                <div className=\"order-2 p-2 bd-highlight\">\n                    <h2>Current Score: {props.score.currentScore} | Top Score: {props.score.topScore}</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar","import React, { Component } from 'react';\nimport \"./style.css\";\n\n//style components\n\nclass Card extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isClicked: false\n        }\n        // this.handleClick = this.handleClick.bind(this)\n    }\n\n    // \n    // handleClick() {\n    //     // console.log(\"before setState \" + this.state.isClicked)\n    //     if (this.state.isClicked === false) {\n    //         this.setState({ isClicked: this.state.isClicked = true })\n    //     }\n    //     else {\n    //         this.setState({ isClicked: this.state.isClicked = false })\n    //     }\n    //     console.log(\"Updated State \" + this.state.isClicked)\n    // }\n\n    render() {\n        // console.log(props.props.image)\n        // console.log(this.state.clicked)\n        // destructor props\n        const { id, name, image } = this.props.props\n        return (\n            /* onClick={} passed function from parent, App.js */\n            //props.props displays the data from the characters.json information\n            //props.onClick runs the parent function gameScore\n            < div className=\"card\" onClick={this.props.onClick}>\n                <div className=\"img-container\" id={id} >\n                    <img id={id} alt={name} src={image} />\n                    {/* onClick={this.handleClick} state={this.state.isClicked} these code snippets are not used */}\n                    {/* {console.log(this.state.isClicked)} */}\n                </div>\n            </div >\n        )\n    }\n}\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\"\nimport Card from \"./components/Card/Card\"\nimport Wrapper from \"./components/Wrapper/index\"\nimport Data from \"../src/data/characters.json\"\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clicked: [],\n      currentScore: 0,\n      topScore: 0,\n      charData: Data,\n    }\n    this.clickedEvent = this.clickedEvent.bind(this)\n  }\n\n  shuffleData(array) {\n    // use to shuffle data array layout\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n  }\n\n  gameScore() {\n    //  checks the state of the score and updates accordingly\n    return this.state.currentScore > this.state.topScore ? this.setState({ topScore: this.state.currentScore }) : null;\n  }\n\n  clickedEvent(event) {\n\n    this.gameScore()\n\n    // access the state of the card (child) in App (parent)\n    const { id } = event.target;\n    const { clicked, currentScore, charData } = this.state;\n\n    this.setState(prevState => ({\n      clicked: [...prevState.clicked, id]\n    })\n    )\n\n    // console.log(this.state.clicked)\n\n\n    if (clicked.indexOf(id) === -1) {\n      this.gameScore()\n      this.setState({\n        // if going with the empty array way, use the indexof method.\n        // clicked: this.state.clicked.push([id]),\n        currentScore: currentScore + 1\n      }, () => { this.gameScore() })\n\n      // console.log(\"here\")\n    }\n\n    else {\n      this.setState({\n        clicked: [],\n        currentScore: 0\n      })\n    }\n\n  }\n\n\n  render() {\n    // desctructor state components\n    const { charData } = this.state\n    this.shuffleData(charData)\n\n    return (\n      <div>\n        <Navbar score={this.state} />\n        <Wrapper>\n\n          {/* Nav Bar\n        Nav bar will contain the title, button click event & current score & top score, this will require the state to be changed and modified  */}\n          {/* run shuffleCard method to shuffle the Data.map array upon the click event */}\n          {charData.map(item =>\n            <Card\n              shuffleCard={this.shuffle}\n              key={item.id}\n              props={item}\n              onClick={this.clickedEvent} />)}\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}